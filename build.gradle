// Slimer build image and deliver
//apply plugin: 'application'
apply plugin: 'docker'
//Setup gradle-appengine plugin
buildscript {

    repositories {
        maven {
            url "<your local maven registry nexus>"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }

}

repositories {

   maven {
        url "<your local maven registry nexus>"
   }
   jcenter()
   mavenCentral()
}

dependencies {
}

group = "slimer"

docker{
    dockerBinary='docker'
}

task slimerDocker(type:Docker){
    dockerfile='Dockerfile'
    setEnvironment("slimer_COMMIT_ID", commitID())
    applicationName = 'slimer_dev'
    tagVersion = getVersion()
    if (System.properties['registry'] != null) {
        registry = System.properties['registry']
    }else{
        registry = '<your default private docker registry server>'
    }
    tag = "${registry}/${project.group}/${applicationName}"
    stageDir = project.rootDir
    if (System.properties['push'] == 'true' ){
        push = true
    }
}


def getVersion(){
    Properties version = new Properties()
    File pf = new File(rootProject.getRootDir().getAbsolutePath()+'/version.ini')
    pf.withInputStream {
       version.load(it)
    }
    print version.get('VERSION_BUILD')
    return String.format("%s.%s.%s",version.get('VERSION_MAJOR'),version.get('VERSION_MINOR'),version.get('VERSION_BUILD'))
}

def commitID() {
    def stdout = new ByteArrayOutputStream()
    exec {
        //commandLine 'git', 'show', '-s', '--pretty=oneline'
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
